/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include "r.h"


void
message_server_1(char *host,  char *argv[]) 
{
	// argv[2] = function
	// argv[3] = parameter (can be a struct)
	CLIENT *clnt;
	int  *result;
	
	
	// Create connection to RPC
	
	clnt = clnt_create (host, MESSAGE_SERVER, MESSAGE_SERVER_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		printf("ERROR ");	
	exit (1);
	
	}

	
	//Check arguments
	
	// INIT

	if (strcmp(argv[2],"INIT") == 0) {
		
		printf("%s called succesfully \n", argv[2]);
		
		result = init_1(clnt);
		if (result == (int *) NULL) {
		clnt_perror (clnt, "call failed");
		}
	}
	
	// REGISTER
	if (strcmp(argv[2],"REGISTER") == 0) {
	
		printf("%s called succesfully with parameter %s \n", argv[2], argv[3]);
		printf("2 \n");
		result = register_1(argv[3], clnt);
		
			if (result == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}	
	}
	
	//UNREGISTER


	if (strcmp(argv[2],"UNREGISTER") == 0) {
		printf("%s called succesfully with parameter %s \n", argv[2], argv[3]);
		
		result = unregister_1(argv[3], clnt);
		
			if (result == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}	
	}
	
	
	//STORE

// INTEGRACION : ASUMO QUE EL MENSAJE YA HA SIDO COMPROBADO Y EL STRUCT ESTA BIEN
	
	if (strcmp(argv[2],"STORE") == 0) {
		printf("%s called succesfully \n", argv[2]);
	
	/*struct mensaje *msg = malloc(sizeof(struct mensaje));
	
	strcpy(msg->sender,"pepe");
	strcpy(msg->receiver,"ramiro");
	strcpy(msg->text,"Hola k ase");
	msg->id = 23;
	
	printf("2\n");*/

	char *sender = "pepe";
	char *receiver = "ramiro";
	int id = 45;
	char *text = "ola k ase ";
	char *md5 = "2jaduf8SJAA7jd8djh8";
	char *path ="path_tu_casa";

		result = store_1(sender,receiver,id,text,md5, path , clnt);
			
		if (result == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}
	
	}
	
	// MSG_COUNT


	if (strcmp(argv[2],"MSG_COUNT") == 0) {
		printf("%s called succesfully with parameter %s \n", argv[2], argv[3]);
		
		result = msg_count_1(argv[3], clnt);
			printf("Result = %d \n", *result);
			if (result == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}	
	}
	clnt_destroy (clnt);

}


	// QUERY 
	/*
	if (strcmp(argv[2],"QUERY") == 0) {
		printf("%s called succesfully with parameter %s \n", argv[2], argv[3], argv[4]);
		
		struct query_msg = malloc(sizeof(struct query_msg));
		
		query_msg = query_1(argv[3],argv[4] clnt);
			printf("Result = %d \n", query_msg.md5);
			if (result == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}	
	}
	clnt_destroy (clnt);
}
	*/
int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 3) {
		printf ("usage: %s server_host FUNCTION(uppercase) parameters(if any)\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	message_server_1 (host, argv);
exit (0);
}
